[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "techno"
version = "0.1.0"
description = "A comprehensive techno music generation system"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
authors = [
    {name = "Techno Generator Team"},
]
keywords = ["music", "generation", "techno", "audio", "synthesis"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
]
dependencies = [
    "click>=8.0.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pydub>=0.25.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "types-PyYAML>=6.0",
    "black==25.9.0",
    "isort==7.0.0",
    "flake8==7.3.0",
    "mypy==1.18.2",
    "typing-extensions>=4.0.0",
]

[project.scripts]
techno = "techno.cli.main:main"

# UV-specific dependency groups (THIS IS THE FIX!)
[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "types-pyyaml>=6.0.12.20250915",
    "black==25.9.0",
    "isort==7.0.0",
    "flake8==7.3.0",
    "mypy==1.18.2",
    "typing-extensions>=4.0.0",
]

# Correct Hatchling config for src/ layout
[tool.hatch.build.targets.wheel]
packages = ["src/techno"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=techno --cov-report=term-missing --cov-report=html --cov-report=xml"
pythonpath = ["src"]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src/techno"]
omit = ["*/tests/*", "*/test_*", "*/conftest.py", "*/__pycache__/*"]
relative_files = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
mypy_path = "src"
files = ["src/techno"]
pretty = true
show_error_codes = true

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true

[tool.black]
line-length = 127
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
exclude = [".venv", "__pycache__", "build", "dist", ".git"]
max-line-length = 127
extend-ignore = ["E203", "W503"]
per-file-ignores = [
    "__init__.py:F401",
]
