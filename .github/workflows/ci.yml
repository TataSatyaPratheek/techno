name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    # CRITICAL: Install FFmpeg for PyDub
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libavcodec-extra libsndfile1

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    # THE FIX: Use uv sync (NOT uv sync --dev)
    - name: Install dependencies
      run: |
        uv sync

    # Verify tools are installed
    - name: Verify installation
      run: |
        uv run python -c "import pytest; print('✓ pytest installed')"
        uv run python -c "import black; print('✓ black installed')"
        uv run python -c "import coverage; print('✓ coverage installed')"

    - name: Run tests
      run: |
        uv run pytest --cov=techno --cov-report=term-missing --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.12'
      with:
        name: coverage-report
        path: htmlcov/

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    # THE FIX: Use uv sync (it reads [dependency-groups])
    - name: Install dependencies
      run: |
        uv sync

    - name: Verify linting tools
      run: |
        uv run black --version
        uv run isort --version
        uv run flake8 --version
        uv run mypy --version

    - name: Check formatting with Black
      run: |
        uv run black --check --diff src/techno tests

    - name: Check imports with isort
      run: |
        uv run isort --check-only --diff src/techno tests

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        uv run flake8 src/techno tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        uv run flake8 src/techno tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        uv run mypy src/techno
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: |
        uv sync

    - name: Build package
      run: |
        uv build

    - name: Verify build
      run: |
        ls -lh dist/
        echo "✓ Build artifacts created"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30
